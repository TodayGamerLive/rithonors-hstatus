<?php
/**
 * @file hdata.module
 * Manages the database queries for the Honors modules.
 * 
 * I chose to put this in a separate module for two reasons.
 *  - It keeps the code cleaner in the other files.
 *  - It gives more flexibility if we should change the db structure.
 */

/**
 * hdata_load_user
 * 
 * Arguments:
 *  1. $username - RIT DCE
 *  2. $loadCourses - NOT YET SUPPORTED
 *  3. $loadSubmissions - NOT YET SUPPORTED
 *  4. $reset - forces loading of a new user object instead of using the cache.
 * 
 * Loads an hdata user object.  This function is very complex because it
 * uses a smart caching system to improve performance.
 * 
 * Structure
 *      -basic
 *          -name
 *              -firstname
 *              -lastname
 *          -active
 *          -college
 *          -department
 *          -program
 *          -gpa
 *      -continuation
 *          -status
 *          -cl
 *          -college
 *          -courses
 *          -gpa
 *      -points
 *          -points
 *          -waivers
 *          -courses
 *          -total
 *      -courses (optional, NOT YET SUPPORTED)
 *          array of (course, name, professor, quarter, grade, credits, honors)
 *      -submissions (optional, NOT YET SUPPORTED)
 *          -to be determined
 */
 
function hdata_load_user($username, $loadCourses = false, $loadSubmissions = false, $reset = false){
    //allows short-term caching (within each page load)
    static $husers;
    
    /*check the short term cache in the static variable $husers.
    * The decision making process is as follows:
    *   1. check if caches should be used at all from the $reset variable.
    *   2. check to see if the user is available in the array
    *   3. if we don't have to load courses or submissions then it is guaranteed
    *       to be everything that we need in the object.
    */
    if(!$reset && isset($husers[$username]) 
            && !($loadCourses || $loadSubmissions)){
        return $husers[$username];
    }
    
    //Query Definitions 
    
    /*
     * Gathers basic student information such as name, college,
     * gpa, and status
     * 
     * It takes one parameter: username as a string
     */
    $q_basic = 
    "SELECT 
        student.firstname fname, 
        student.lastname lname, 
        student.college college, 
        student.department dpt, 
        student.program program, 
        student.active active, 
        gpas.gpa gpa
     FROM {h_students} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
     WHERE student.username = '%s'
     LIMIT 1";
    /*
     * Computes total Honors Points awarded
     * 
     * Takes username as a string
     */
    $q_pts = "SELECT username, sum(numPoints) total
                FROM {h_students_points}
                WHERE username = '%s'
                GROUP BY username";
    /*
     * Computes total Honors credits completed
     * 
     * Takes username as a string
     */
    $q_cpts = "SELECT username, sum(credits) total
                FROM {h_students_courses}
                WHERE username = '%s'
                GROUP BY username";
    /*
     * Computes total Honors Points Waivers granted
     * 
     * Takes username as a string
     */
    $q_wpts = "SELECT username, sum(credits) total
                FROM h_students_waivers
                WHERE username = '%s'
                GROUP BY username";
    
    /*
     * Collects info from h_continuation table
     * 
     * Takes username as a string
     */
    $q_continue = 
    "SELECT status, comp_learn, college, courses, gpa
     FROM {h_continuation}
     WHERE username = '%s'
     LIMIT 1";
    /*
     * Collects courses taken.  (Note this is different from $q_cpts
     * which computes total credits)
     */
    $q_courses = 
    "SELECT course, name, professor, quarter, grade, credits, honors
     FROM {h_students_courses} courses
     WHERE courses.username = '%s'
     LIMIT 1";
    /*
     * Collects complearning submissions from within a specified
     * timeframe.
     */
    $q_cl = 
    "SELECT cl.id, cl.status, cl.submit_date
    FROM {h_cl} cl
    JOIN {users} u
    ON u.uid = cl.uid
    WHERE u.name = %s
    AND cl.submit_date > %d";
    
    // is it in the short term cache?
    if(!$reset && isset($husers[$username])){
        $u = $husers[$username];
    // is it in the long term (database) cache?
    } else if(!$reset 
            && ($cache = cache_get("hdata_user:$username",'cache_honors')) 
            && !empty($cache->data)) {
        // all cached data in the db cache is serialized.
        $u = unserialize($cache->data);
    // fetch new data.
    // Note that this will fail if the user lacks an entry in either the h_students
    // or the h_continuation table.
    } else {
        // Fetch Basic Info
        $u['username'] = $username;
        $uid = db_result(db_query('SELECT uid FROM users WHERE name=\'%s\'',$username));
        $u['uid'] = $uid;
        $rs = db_query($q_basic, $username,$username,$username,$username);
        $arry = db_fetch_array($rs);
        
        //TODO: make something meaningful out of college+dept+program
        if($arry){
            $u['basic'] = array(
                'name' => array(
                    'firstname' => $arry['fname'],
                    'lastname' => $arry['lname'],
                ),
                'active' => $arry['active'],
                'college' => $arry['college'],
                'department' => $arry['dpt'],
                'program' => $arry['program'],
                'gpa' => $arry['gpa'],
            );
        }else{
            //DEBUG, but we should maybe return error statuses instead of just 'false' 
            drupal_set_message(t('@username is not in Honors',array('@username'=>$username)),'warning');
            return false; 
        }
        
        // Fetch Continuation Info
        $rs = db_query($q_continue, $username);
        $arry = db_fetch_array($rs);
        if($arry){
            $u['continuation'] = array(
                'status' => $arry['status'],
                'cl' => $arry['comp_learn'],
                'college' => $arry['college'],
                'courses' => $arry['courses'],
                'gpa' => $arry['gpa'],
            );
        }else{
            //DEBUG, but we should maybe return error statuses instead of just 'false'
            drupal_set_message(t('@username has no continuation entry',array('@username'=>$username)),'warning');
            return false;
        }
        
        // Fetch Points
        // All of this might get changed later if we add columns to the h_students
        // table that store this information (those would be updated via cron)
        $u['points'] = array(
            'points' => 0,
            'courses' => 0,
            'waivers' => 0,
            'total' => 0,
        );
        //keep track of total points
        $total = 0;
        //points from point submissions like trips, research, etc
        $rs = db_query($q_pts, $username);
        $arry = db_fetch_array($rs);
        if($arry){
            $u['points']['points'] = $arry['total'];
            $total += $arry['total'];
        }
        //points from courses
        $rs = db_query($q_cpts, $username);
        $arry = db_fetch_array($rs);
        if($arry){
            $u['points']['courses'] = $arry['total'];
            $total += $arry['total'];
        }
        //points from waivers
        $rs = db_query($q_wpts, $username);
        $arry = db_fetch_array($rs);
        if($arry){
            $u['points']['waivers'] = $arry['total'];
            $total += $arry['total'];
        }
        //total points
        $u['points']['total'] = $total;
        
        //store data in cache with 2 hour lifetime.
        //this comes before the db queries for courses and submissions because we
        //don't cache the courses and submissions because they aren't always loaded.
        cache_set("hdata_user:$username", serialize($u), 'cache_honors', time() + 2*60*60);
    }
    
                    // below needed in case of static variable load
    if($loadCourses && ($reset || !isset($u['courses']))){
        //TODO: implement
    }
    
    if($loadSubmissions && ($reset || !isset($u['submissions']))){
        //TODO: implement
            // Date, status, and link should be sufficient info.
            // 1. 'complearn' => submitted to h_complearning.  This year only.
            // 2. 'cldrafts' => true or false.  whether they have an
            //          outstanding cldraft.
            // 3. 'points' => ???
        //TODO: make this time configurable
        //$rs_cl = db_query($q_cl,$username,strtotime('-9 months'));
        $u['cldraft'] = (boolean)hdata_load_cldraft($u['uid']);
        $rs = db_query('SELECT id, status, hours, submit_date, review_date 
                        FROM {h_cl} WHERE uid=%d 
                        ORDER BY submit_date DESC LIMIT 1',
                        $u['uid']);
        $u['complearn'] = $rs?db_fetch_array($rs):null;
        
    }
    
    $husers[$username] = $u;  //update static variable for future calls

    return (object) $u;
}

/**
 * hdata_load_cldraft
 * 
 * @param $uid The Drupal user id to search for
 * @param $expire A time length (to be passed to strtotime) specifying the
 *  maximum age of the data.  Defaults to 1 year
 * 
 * this fails and returns false if the data cannot be loaded, if it is
 * older than the expire length or if $data['count'] is not set.
 */
function hdata_load_cldraft($uid, $expire = '1 year'){
    //basic caching
    static $cldrafts;
    if(isset($cldrafts[$uid]) && isset($cldrafts[$uid]['count'])){
        //DEBUG
        drupal_set_message('loading from short term cache');
        return $cldrafts[$uid];
    }
    
    $q = 
    "SELECT data.submission 
    FROM {h_cldrafts} draft
    JOIN {h_cl_data} data
    ON draft.id = data.id
    WHERE draft.uid=%d
    AND draft.updatetime > %d";
    
    $time = strtotime('-'.trim($expire));
    $rs = db_query($q,$uid,$time);
    $submission = db_result($rs);
    
    if($submission){
        $data = unserialize($submission);
        if(isset($data['count']) && $data['count'] > 0){
            $cldrafts[$uid] = $data;
            return $data;
        }else{
            //DEBUG
            drupal_set_message('Invalid count loaded');
        }
    }
    drupal_set_message('returning false');
    return false;
}

/**
 * hdata_save_cldraft
 * 
 * Saves $data to the h_cldrafts db table.
 */
function hdata_save_cldraft($uid,$data){
    //basic caching
    static $cldrafts;
    $cldrafts[$uid] = $data;
    
    $rs = db_query("SELECT uid, id FROM {h_cldrafts} WHERE uid=%d",$uid);
    if($rs){
        $result = db_fetch_array($rs);
        $id = isset($result['id'])?$result['id']:-1;
    }
    
    if($id >= 0){
        $dataobj = new stdClass();
        $dataobj->id = $id;
        $dataobj->submission = serialize($data);
        
        $draftobj = new stdClass();
        $draftobj->uid = $uid;
        $draftobj->updatetime = time();
        
        $success = drupal_write_record('h_cl_data',$dataobj,'id');
        if(!$success) return false;
        
        return drupal_write_record('h_cldrafts',$draftobj,'uid');
    }else{
        //this probably only works for MySQL...
        db_query('INSERT INTO {h_cl_data} (submission) VALUES (%b)',serialize($data));
        db_query('INSERT INTO {h_cldrafts} (uid,updatetime,id) VALUES (%d,%d,LAST_INSERT_ID())',$uid,time());
        return true;
    }
}

/*
 * hdata_clsubmit
 * 
 * Saves a draft to the h_complearning database
 */
function hdata_clsubmit($uid, $expire = '1 year'){
    $user = user_load($uid);
    $huser = hdata_load_user($user->name);
    if(!$huser){
        drupal_set_message('Failed to load your profile.','error');
        return false;
    }elseif($huser->continuation['comp_learn'] == 1){
        drupal_set_message(t('Not submitted. You have already completed Comp Learning for this year.'),'warning');
        return false;
    }elseif($huser->continuation['status'] > 2){
        drupal_set_message(t('Not submitted. You are not active in the Honors Program'),'warning');
        return false;
    }elseif(isset($huser->submissions['complearn']) && is_array($huser->submissions['complearn'])){
        foreach($huser->submissions['complearn'] as $sub){
            //TODO: don't hard code values
            if($sub['status'] == 0){
                drupal_set_message(t('Not submitted. You already have a pending submission.'),'warning');
                return false;
            }
        }
    }
    
    $q = 
    "SELECT data.submission, data.id 
    FROM {h_cldrafts} draft
    JOIN {h_cl_data} data
    ON draft.id = data.id
    WHERE draft.uid=%d
    AND draft.updatetime > %d";
    
    $time = strtotime('-'.trim($expire));
    $rs = db_query($q,$uid,$time);
    $result = db_fetch_object($rs);
    $data = unserialize($result->submission);
    
    /* Loop through the data array to compile hours and types */
    $hours = 0; $types = '';
    for($i = 1; $i <= $data['count']; $i++){
        $hours += $data[$i]['hours'];
        $types .= $data[$i]['type'].' ';
    }
    /* Save to db
     * 
     * Don't use drupal_write_record b/c it will ignore information
     * about the column `id` due to the fact that the column is
     * an auto increment column.
     */
    $write = "INSERT INTO {h_cl}
    (uid, id, hours, types, submit_date)
    VALUES (%d, %d, %d, '%s', %d)";
    if(db_query($write,$uid,$result->id,$hours,$types,time())){
        return db_query("DELETE FROM {h_cldrafts} WHERE uid=$uid");
    }
}

/**
 * Get complearning submission data by submission id
 */
function hdata_cl_data_by_id($sid){
    $result = db_query('SELECT submission FROM {h_cl_data} WHERE id = %d',$sid);
    if(!$result) return null;
    $obj = db_fetch_object($result);
    if($obj){
        return unserialize($obj->submission);
    }else{
        return null;
    }
}
    
