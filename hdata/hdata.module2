<?php
/**
 * @file hdata.module
 * Manages the database queries for the Honors modules.
 * 
 * I chose to put this in a separate module for two reasons.
 *  - It keeps the code cleaner in the other files.
 *  - It gives more flexibility if we should change the db structure.
 */
 
/*
 * Public Functions
 * 
 * All the implementation detail are sequestered into other functions in
 * this file for greater readability and to make it so that the whole
 * interface is visible at-a-glance.
 */

/* Returns a user array. $user = array('uid => 0, 'name => '') */
function hdata_user_load($user){return _hdata_user_load($user);} 
/* Saves the basic and continuation elements.  $user is a modified 
 * object from hdata_user_load */
function hdata_user_save($user){return _hdata_user_save($user);}
/* Used internally, but userful(?) externally for info */
//TODO: make this a system variable
function hdata_user_cache_life(){return '2 days';}

/* id should be uid if $draft is true */
function hdata_cl_load($id,$draft=false){ return _hdata_cl_load($id,$draft); }
/* $draft is what you want it to be saved as */
function hdata_cl_save($submission,$draft=false){ return _hdata_cl_save($submission,$draft); } 
//TODO: make this a system variable
function hdata_cl_draft_life(){return '1 year';}



/**
 * hdata_user load
 * 
 * Arguments:
 *  1. $user - array with either $user['name'] or $user['uid'] set.  
 *          $user['name'] overrides $user['uid'].
 *  4. $reset - forces loading of a new user object instead of using the cache.
 * 
 * Returns: an array representing the user
 * 
 * Loads an hdata user object.  This function is very complex because it
 * uses a smart caching system to improve performance.
 * 
 * Structure (array keys)
 *      -name: username
 *      -uid
 *      -basic
 *          -name
 *              -firstname
 *              -lastname
 *          -active
 *          -college
 *          -department
 *          -program
 *          -gpa
 *      -continuation
 *          -status
 *          -cl
 *          -college
 *          -courses
 *          -gpa
 *      -points
 *          -points
 *          -waivers
 *          -courses
 *          -total
 *      -courses (NOT YET SUPPORTED)
 *          array of (course, name, professor, quarter, grade, credits, honors)
 *      -submissions
 *          -complearn: complearning submissions
 *          -cldraft: true or false whether a cl draft is submitted
 */
 
function _hdata_user_load($user, $reset = false){
    //get the username and uid
    if(isset($user['name']){
        $username = $user['name'];
        $uid = db_result(db_query('SELECT uid FROM users WHERE name=\'%s\'',$username));
        if(!$uid) return false; //not found
    }else if(isset($user['uid'])){
        $uid = $user['uid'];
        $username = db_result(db_query('SELECT name FROM users WHERE uid=%d',$uid));
        if(!$username) return false; //not found
    }else{
        return false; //not enough data supplied
    }
     
    //allows short-term caching (within each page load)
    static $husers;
    
    /*check the short term cache in the static variable $husers.
    * The decision making process is as follows:
    *   1. If $reset is false:
    *       a. check the short term cache (& return if available)
    *       b. check the long term cache (& return if available)
    *   2. Fetch the data
    *   3. Cache the data
    *   4. Return the user object
    */
    if(!$reset && isset($husers[$username])){
        //fetch from 
        return $husers[$username];
    }
    
    if(!$reset && ($cache = cache_get("hdata_user:$username",'cache_honors')) && !empty($cache->data)) {
        // get from long term cache
        // all cached data in the db cache is serialized.
        return unserialize($cache->data);
    }
    
    $u['name'] = $username;
    $u['uid'] = $uid;
    $u['basic'] = _hdata_user_load_basic($username);
    $u['continuation'] = _hdata_user_load_continuation($username);
    $u['points'] = _hdata_user_load_points($username);
    $u['submissions'] = _hdata_user_load_submissions($uid);
    
    cache_set("hdata_user:$username", serialize($u), 'cache_honors', 
        strtotime('+'.hdata_user_cache_life()));
    $husers[$username] = $u;  //update static variable for future calls

    return $u;
}

/*
 * Gathers basic student information such as name, college,
 * gpa, and status
 */
function _hdata_user_load_basic($username){
    $q_basic = 
    "SELECT 
        student.firstname fname, 
        student.lastname lname, 
        student.college college, 
        student.department dpt, 
        student.program program, 
        student.active active, 
        gpas.gpa gpa
     FROM {h_students} student
     JOIN {h_students_gpa} gpas
        ON student.username = gpas.username
     WHERE student.username = '%s'
     LIMIT 1";
     $rs = db_query($q_basic, $username);
     $arry = db_fetch_array($rs);
     if($arry){
         return array(
             'name' => array(
                 'firstname' => $arry['fname'],
                 'lastname' => $arry['lname'],
             ),
             'active' => $arry['active'],
             'college' => $arry['college'],
             'department' => $arry['dpt'],
             'program' => $arry['program'],
             'gpa' => $arry['gpa'],
         );
     }else{
         return false; 
     }
}
/*
 * Collects info from h_continuation table
 */
function _hdata_user_load_continuation($username){
    $q_continue = 
    "SELECT status, comp_learn, college, courses, gpa
     FROM {h_continuation}
     WHERE username = '%s'
     LIMIT 1";
    $rs = db_query($q_continue, $username);
    $arry = db_fetch_array($rs);
    if($arry){
        return array(
            'status' => $arry['status'],
            'cl' => $arry['comp_learn'],
            'college' => $arry['college'],
            'courses' => $arry['courses'],
            'gpa' => $arry['gpa'],
        );
    }else{
        return false;
    }
}
function _hdata_user_load_points($username){
    //I don't like the way this used to be done.
    //It needs a redo.
    return null;
}
/*
 * Grabs most recent comp learning submission and indicates whether
 * a draft is in progress
 */
function _hdata_user_load_submissions($uid){
    $rs = db_query('SELECT id, status, hours, submitted_date, reviewed_date 
                    FROM {h_cl} WHERE uid=%d 
                    SORT BY submitted_date DESC LIMIT 1', $uid);
    return array(
        'complearn' =>  $rs?db_fetch_array($rs):false,
        'cldraft' => (bool)hdata_load_cldraft($uid),
    );
}

function _hdata_user_save($user){
    //If they aren't both set, it probably isn't a valid object
    if(!(isset($user['uid']) && isset($user['name']))){
        return false;
    }
    $success = _hdata_user_save_basic($user) || _hdata_user_save_continuation($user);
    if($success){
        cache_set("hdata_user:$username", serialize($u), 'cache_honors', 
        strtotime('+'.hdata_user_cache_life()));
        return true;
    }else{ return false; }
}

function _hdata_user_save_basic($user){
    //TODO: do perm checks
    $q = "UPDATE {h_students}
    SET firstname='%s', lastname='%s', college='%s', department='%s', program='%s', active=%d
    WHERE username='%s'";
    $b = $user['basic'];
    if(db_query($q,$b['name']['firstname'],$b['name']['lastname'],
            $b['college'], $b['department'], $b['program'],$b['active'],$user['name'])){
        return true;
    }else{
        return false;
    }
}
function _hdata_user_save_continuation($user){
    //TODO: do perm checks
    $q = "UPDATE {h_continuation}
    SET status=%d, comp_learn=%d, college=%d, courses=%d, gpa=%d
    WHERE username='%s'";
    $c = $user['continuation'];
    if(db_query($q,$c['status'],$c['cl'],$c['college'],$c['courses'],$c['gpa'],$user['name'])){
        return true;
    }else{
        return false;
    }
}
 
 function _hdata_cl_load($id,$draft){
    if($draft){
        $data = _hdata_cldraft_load($id);
        if(!$data){
            return false;
        }else{
            return array(
                'uid' => $id,
                'draft' => true,
                'data' => $data,
            );
        }
    }else{
        $data = _hdata_cl_data_by_id($id);
        $rs = db_query('SELECT id, uid, status, hours, types, submit_date, reviewed_date, reviewer_uid, 
                        FROM {h_cl} WHERE id=%d',
                        $id);
        if($rs){
            $info = db_fetch_array($rs);
            $info['draft'] = $draft;
            $info['data'] = $data;
            return $info;
        }else{ return false; }
    }
}
function _hdata_cl_save($sub,$draft){
    if($draft && $sub['draft']){
        //saving a draft as a draft
        return _hdata_cldraft_save($sub['uid'],$sub['data']);
    }else if(!$draft && !$sub['draft']){
        //saving a submission as a submission
        //only certain fields are supposed to be mutable
        $q = "UPDATE {h_cl} SET status=%d, reviewed_date=%d, reviewer_uid=%d WHERE id=%d";
        return (bool)db_query($q,$sub['status'],$sub['reviewed_date'],$sub['reviewer_uid'],$sub['id']);
    }else if(!$draft && $sub['draft']){
        $username = user_load($sub['uid']);
        if(($msg = hcomplearn_submit_allowed($username)) != 'ok'){
            drupal_set_message($msg,'error');
            return false;
        }
        //saving a draft as a submission
        $data = _hdata_cl_save_stripdraft($sub['data']);
        $info = _hdata_cl_save_extractinfo($data);
        //TODO: don't hard code this
        if($info['hours'] < 20) return false;
        $q = "INSERT INTO {h_cl} (uid, hours, types, submit_date) VALUES (%d, %d, '%s', %d)";
        return (bool)db_query($q, $sub['uid'], $info['hours'], $info['types'], time());
    }else{
        //illegal operation
        return false;
    }
}
//this will eventually do something
function _hdata_cl_save_stripdraft($d){return $d;}
function _hdata_cl_save_extractinfo($data){
    $hours = 0; $types = '';
    for($i = 1; $i <= $data['count']; $i++){
        $hours += $data[$i]['hours'];
        $types .= $data[$i]['type'].' ';
    }
    return array('hours'=>$hours,'info'=>$info);
}      
        
 
 //////////////////////////////////////////////////////////////////
 //////////////////////OLD STUFF///////////////////////////////////
 //////////////////////////////////////////////////////////////////

/**
 * hdata_load_cldraft
 * 
 * @param $uid The Drupal user id to search for
 * @param $expire A time length (to be passed to strtotime) specifying the
 *  maximum age of the data.  Defaults to 1 year
 * 
 * this fails and returns false if the data cannot be loaded, if it is
 * older than the expire length or if $data['count'] is not set.
 */
function _hdata_cldraft_load($uid, $expire = '1 year'){
    //basic caching
    static $cldrafts;
    if(isset($cldrafts[$uid]) && isset($cldrafts[$uid]['count'])){
        return $cldrafts[$uid];
    }
    
    $q = 
    "SELECT data.submission 
    FROM {h_cldrafts} draft
    JOIN {h_cl_data} data
    ON draft.id = data.id
    WHERE draft.uid=%d
    AND draft.updatetime > %d";
    
    $time = strtotime('-'.trim($expire));
    $rs = db_query($q,$uid,$time);
    $submission = db_result($rs);
    
    if($obj){
        $data = unserialize($submission);
        if(isset($data['count'])){
            $cldrafts[$uid] = $data;
            return $data;
        }
    }
    return false;
}

/**
 * hdata_save_cldraft
 * 
 * Saves $data to the h_cldrafts db table.
 */
function _hdata_cldraft_save($uid,$data){
    //basic caching
    static $cldrafts;
    $cldrafts[$uid] = $data;
    
    $rs = db_query("SELECT uid, id FROM {h_cldrafts} WHERE uid=%d",$uid);
    if($rs){
        $result = db_fetch_array($rs);
        $id = isset($result['id'])?$result['id']:-1;
    }
    
    if($id >= 0){
        $dataobj = new stdClass();
        $dataobj->id = $id;
        $dataobj->submission = serialize($data);
        
        $draftobj = new stdClass();
        $draftobj->uid = $uid;
        $draftobj->updatetime = time();
        
        $success = drupal_write_record('h_cl_data',$dataobj,'id');
        if(!$success) return false;
        
        return drupal_write_record('h_cldrafts',$draftobj,'uid');
    }else{
        //this probably only works for MySQL...
        db_query('INSERT INTO {h_cl_data} (submission) VALUES (%b)',serialize($data));
        db_query('INSERT INTO {h_cldrafts} (uid,updatetime,id) VALUES (%d,%d,LAST_INSERT_ID())',$uid,time());
        return true;
    }
}

/**
 * Get complearning submission data by submission id
 */
function _hdata_cl_data_by_id($sid){
    $result = db_query('SELECT submission FROM {h_cl_data} WHERE id = %d',$sid);
    if(!$result) return null;
    $obj = db_fetch_object($result);
    if($obj){
        return unserialize($obj->submission);
    }else{
        return null;
    }
}
    
