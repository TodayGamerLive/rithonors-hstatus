<?php

/**
 * @file hstatus.module
 * 
 * This file must be located in the hstatus folder and is loaded on every
 * page.
 */

/**
 * Implements hook_menu
 * 
 * hook_menu is called by drupal whenever a module is enabled or disabled
 * to update the internal page registry.
 * 
 * Note that every page has a built-in permissions callback ("access callback")
 * that determines if (1) it should be shown in menus and (2) if a user
 * can visit it (throws a 403 on false)
 */
function hstatus_menu(){
    /* the array key gives the path.  note the % sign which indicates an
     * argument.  The 'user' after the % indicates that argument should
     * be the return value of the function 'user_load' instead of the actual
     * argument, which will be an integer. Also note that this may not be
     * the path the user sees because modules are allowed to alias any 
     * path name they want.
     */
    $items['user/%user/mystatus'] = array(
        //menu title
        'title' => 'My Status',
        //function to generate the HTML content
        'page callback' => 'hstatus_user_page',
        //arguments to be passed to the preceding function
        //it is an array because multiple arguments can be passed.
        //1 means the first argument.
        'page arguments' => array(1),
        //file that the page function is located in (relative to module directory)
        'file' => 'includes/hstatus.pages.inc',
        //MENU_LOCAL_TASK means that it shold be displayed as a tab
        'type' => MENU_LOCAL_TASK,
        //function to decide if the user has permissions
        'access callback' => '_hstatus_status_access',
        //arguments to the preceding function
        'access arguments' => array(1),
        //weight in menu or tab bar
        'weight' => 2,
    );
    $items['hstatus/submission/%'] = array(
        'title' => 'CL submission',
        'page callback' => 'hstatus_cl_submission',
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
        //'file' => 'includes/hstatus.ajax.inc',
        //TODO: write real callback
        'access callback' => '_hstatus_cl_review_access',
        'access arguments' => array('view'),
    );

    //complearning form
    //note that even though no % is in the path, anything postfixing
    //the path gets passed as an argument
    $items['hstatus/submitcl'] = array(
        'title' => 'Comp Learning Form',
        'page callback' => 'hstatus_build_clform',
        'file' => 'includes/forms/hstatus.clform.inc',
        'access callback' => '_hstatus_form_cl_access',
    );
    return $items;
}

//TODO: move this
function hstatus_cl_submission($sid){
    if(module_load_include('inc','hstatus','includes/hstatus.db') === FALSE){
        print '<h1>Internal Error: hStatus Database API</h1>';
        return null;
    }
    $data = hstatus_cl_data_by_id($sid);
    $output = '';
    if($data){
        for($i = 1; $i <= $data['count']; $i++){
            if($data[$i]['name'] == ''){
                $data[$i]['name'] = "Activity $i";
            }
            $output .= theme('hstatus_cl_activity',$data[$i]);
        }
    }else{
        $output = '<h1>Not Found</h1>';
    }
    
    /*$output = print_r($data,true);
    $output = "<pre>$output</pre>";*/
    //AJAX functions should echo the output and return null to prevent
    //the theme system from kicking in.
    echo $output;
    return null;
}

/**
 * Implements hook_perm
 * 
 * Just returns an array of strings to be used on the permissions page
 */
function hstatus_perm(){
    return array('view all honors status pages','administer honors status',
        'submit complementary learning', 'review complementary learning');
}

/**
 * Implements hook_theme
 * 
 * hook_theme defines "theme hooks" which are just functions or files that
 * generate HTML.  The benefit of doing this is that it makes it easy for
 * other modules or themes to override your display.
 */
function hstatus_theme($existing, $type, $theme, $path){
    return array(
        //renders the mystatus page
        'hstatus_mystatus' => array(
            //this is the file that generates the output
            //relative to module directory, less the .tpl.php
            'template' => 'templates/mystatus',
            //the file in which the preprocessor is located.
            //preprocessors define variables for the template.
            'file' => 'includes/hstatus.pages.inc',
            //arguments passed to the 'theme' function and the preprocessor
            'arguments' => array('user' => NULL),
        ),
        'hstatus_cl_activity' => array(
            'arguments' => array('activity' => NULL),
            'file' => 'includes/hstatus.pages.inc',
            'template' => 'templates/clactivity',
        ),
    );
}

/**
 * Implements hook_action_info
 */
function hstatus_action_info(){
    return array(
        'hstatus_approve_cl_action' => array(
            'description' => t('Approve Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => FALSE,
        ),
        'hstatus_reject_cl_action' => array(
            'description' => t('Reject Comp Learning Submission'),
            'type' => 'complearning',
            'configurable' => FALSE,
        ),
    /*'user_block_ip_action' => array(
      'description' => t('Ban IP address of current user'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('presave', 'delete', 'insert', 'update', 'view'),
        'comment' => array('view', 'insert', 'update', 'delete'),
        'user' => array('logout'),
      )
    ),*/
  );
}

function hstatus_approve_cl_action($submission){
    $id = $submission['id'];
    db_query('UPDATE {h_cl} SET status=1 WHERE id=%d',$id);
}
function hstatus_reject_cl_action($submission){
    $id = $submission['id'];
    db_query('UPDATE {h_cl} SET status=2 WHERE id=%d',$id);
}

function hstatus_cl_load($sid){
    if(module_load_include('inc','hstatus','includes/hstatus.db') === FALSE){
        drupal_set_message('Internal Error: hStatus Database API missing','error');
        return null;
    }
    $submission = hstatus_cl_data_by_id($sid);
    $submission['id'] = $sid;
    return $submission;
}

/*
 * Implements hook_views_bulk_operations_object_info
 */
function hstatus_views_bulk_operations_object_info(){
    return array(
        'complearning' => array(
            'type' => 'complearning',
            'base_table' => 'h_cl',
            'load' => 'hstatus_cl_load',
            'oid' => 'id',
            'title' => 'id',
            'access' => '_hstatus_cl_review_access',
        ),
    );
}

/**
 * Implements hook_views_api
 */
function hstatus_views_api(){
    return array('api'=>2);
}

/*----------------Access Callbacks------------------*/

/**
 * Menu access callback for a user's MyStatus page.
 *
 * @param $account
 *   A user account object.
 * @return
 *   TRUE if the current user has access, FALSE otherwise.
 */
function _hstatus_status_access($account) {
    //$account is the page that is being accessed
    //$user is the currently logged in user (almost always)
    global $user;

    // Anonymous users cannot have mystatus pages or view mystatus pages.
    if (!$user->uid || !$account->uid) {
        return FALSE;
    }

    // Administrators.  (defined in hook_perm)
    if (user_access('view all honors status pages') 
            || user_access('administer honors status')) {
        return TRUE;
    }

    // Users can always see their own status.
    if ($user->uid == $account->uid) {
        return TRUE;
    }

    //catch-all
    return FALSE;
}

/*
 * for when you just need to signify unlimited access
 */
function _hstatus_static_access(){ return true; }

/*
 * _hstatus_form_cl_access
 */
function _hstatus_form_cl_access(){
    global $user;
    if(user_access('submit complementary learning')){
        if(module_load_include('inc','hstatus','includes/hstatus.db') === FALSE){
            return false;
        }
        $huser = hstatus_load_user($user->name);
        $status = $huser->continuation['status'];
        // active in Honors.
        return $status <= 2;
    }else{
        return false;
    }
}

function _hstatus_cl_review_access($op,$submission=null,$account=null){
    if(is_numeric($op)){
        $account = user_load($op);
    }
    if (empty($account)) {
        $account = $GLOBALS['user'];
    }
    return $account->uid == 1 || user_access('review complementary learning',$account) ||
            user_access('administer honors status',$account);
}
